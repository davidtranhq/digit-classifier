LOAD INPUT:
example is a tuple (label (byte), image (28x28 byte array))
examples is a vector of example tuples
For each image, label file:
	Read num_labels in byte 4 of label
	Read num_images in byte 4 of image
	Verify num_labels == num_images
	Compute image_size = byte 8 of image * byte 12 of image
	For i, num_labels:
		label_byte = Read byte 8+i in label 
		image_data = Read bytes 8+i*image_size in image
		Create example tuple (label_byte, image_data)
		Push example tuple to examples
		

TRAIN:
for each epoch:
	Shuffle training_examples
	Split training_examples into mini-batches
	For each mini-batch:
		For each training example:
			Set activation vector (a1) for input layer
			For each layer:
				Compute vector of weighted averages and activation vector
			Compute error vector from last layer
			Backpropagate and compute error vector for all layers
			Create cost gradient using error values
		Update weights and biases from average cost 

TEST:
LOAD TESTING INPUT
Initialize correct_answers = 0
for each test example:
	Set activation layer (a1) for input layer
	Compute activation vector of last layer
	Record highest activation index and value of activation
	If highest activation index == test example label
		increment correct_answers by 1


MAIN:
Initialize network with vector containing number of neurons in each layer and random weights and biases
training_examples = LOAD TRAINING INPUT
convert labels (byte) in training_examples to a 10-dimensional vector where only the labelled digit is 1
TRAIN
TEST